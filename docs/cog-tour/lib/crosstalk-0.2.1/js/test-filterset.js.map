{"version":3,"sources":["../../../javascript/tests/test-filterset.js"],"names":[],"mappings":"AAAA;;AAEA;;;;AACA;;;;;;AAGA,SAAS,WAAT,EAAsB,YAAM;AAC1B,MAAI,KAAK,yBAAT;;AAEA;AACA,KAAG,wBAAH,EAA6B,YAAM;AACjC,qBAAO,KAAP,CAAa,GAAG,KAAhB,EAAuB,IAAvB;AACD,GAFD;;AAIA,KAAG,6BAAH,EAAkC,YAAM;AACtC,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA3B;AACD,GAHD;;AAKA,KAAG,6BAAH,EAAkC,YAAM;AACtC,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA3B;AACD,GAHD;;AAKA,KAAG,4CAAH,EAAiD,YAAM;AACrD,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,EAAP,CAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA3B;;AAEA,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,CAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,CAA3B;AACD,GAND;;AAQA,KAAG,oCAAH,EAAyC,YAAM;AAC7C,OAAG,MAAH,CAAU,KAAV,EAAiB,EAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,EAA3B;;AAEA,OAAG,KAAH,CAAS,KAAT;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAA3B;AACD,GAND;;AAQA,KAAG,kCAAH,EAAuC,YAAM;AAC3C,OAAG,KAAH,CAAS,KAAT;AACA,qBAAO,KAAP,CAAa,GAAG,KAAhB,EAAuB,IAAvB;AACD,GAHD;;AAKA,KAAG,mBAAH,EAAwB,YAAM;AAC5B,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB;AACA,OAAG,MAAH,CAAU,KAAV,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB;AACA,qBAAO,SAAP,CAAiB,GAAG,KAApB,EAA2B,CAAC,CAAD,EAAG,CAAH,CAA3B;;AAEA,OAAG,KAAH;AACA,qBAAO,KAAP,CAAa,GAAG,KAAhB,EAAuB,IAAvB;AACD,GAPD;AAQD,CA/CD","file":"test-filterset.js","sourcesContent":["\"use strict\";\n\nimport assert from \"assert\";\nimport FilterSet, { diffSortedLists } from \"./filterset\";\n\n\ndescribe(\"FilterSet\", () => {\n  let fs = new FilterSet();\n\n  // Null .value means no filter is being applied.\n  it(\"defaults to null value\", () => {\n    assert.equal(fs.value, null);\n  });\n\n  it(\"handles initial update call\", () => {\n    fs.update(\"foo\", [3,5,7]);\n    assert.deepEqual(fs.value, [3,5,7]);\n  });\n\n  it(\"handles mutation via update\", () => {\n    fs.update(\"foo\", [3,5,7,9]);\n    assert.deepEqual(fs.value, [3,5,7,9]);\n  });\n\n  it(\"uses AND relation between multiple handles\", () => {\n    fs.update(\"bar\", [5,7,9,11]);\n    assert.deepEqual(fs.value, [5,7,9]);\n\n    fs.update(\"bar\", [9,11,13]);\n    assert.deepEqual(fs.value, [9]);\n  });\n\n  it(\"empty set is different than no set\", () => {\n    fs.update(\"bar\", []);\n    assert.deepEqual(fs.value, []);\n\n    fs.clear(\"bar\");\n    assert.deepEqual(fs.value, [3,5,7,9]);\n  });\n\n  it(\"clearing all handles equals null\", () => {\n    fs.clear(\"foo\");\n    assert.equal(fs.value, null);\n  });\n\n  it(\"can totally reset\", () => {\n    fs.update(\"foo\", [1,3,5]);\n    fs.update(\"bar\", [1,2,3]);\n    assert.deepEqual(fs.value, [1,3]);\n\n    fs.reset();\n    assert.equal(fs.value, null);\n  });\n});\n"]}