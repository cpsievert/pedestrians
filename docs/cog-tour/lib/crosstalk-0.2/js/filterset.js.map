{"version":3,"sources":["../../../javascript/src/filterset.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AAEA,SAAS,iBAAT,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC;AAC/B,MAAI,MAAM,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,IAAI,CAAR,EAAW;AAChB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAI,IAAI,CAAR,EAAW;AAChB,WAAO,CAAP;AACD;AACF;;IAEoB,S;AACnB,uBAAc;AAAA;;AACZ,SAAK,KAAL;AACD;;;;4BAEO;AACN;AACA,WAAK,QAAL,GAAgB,EAAhB;AACA;AACA,WAAK,KAAL,GAAa,EAAb;AACA,WAAK,MAAL,GAAc,IAAd;AACA,WAAK,cAAL,GAAsB,CAAtB;AACD;;;2BAMM,Q,EAAU,I,EAAM;AACrB,UAAI,SAAS,IAAb,EAAmB;AACjB,eAAO,KAAK,KAAL,CAAW,CAAX,CAAP,CADiB,CACK;AACtB,aAAK,IAAL,CAAU,iBAAV;AACD;;AAJoB,6BAME,2BAAgB,KAAK,QAAL,CAAc,QAAd,CAAhB,EAAyC,IAAzC,CANF;;AAAA,UAMhB,KANgB,oBAMhB,KANgB;AAAA,UAMT,OANS,oBAMT,OANS;;AAOrB,WAAK,QAAL,CAAc,QAAd,IAA0B,IAA1B;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,aAAK,KAAL,CAAW,MAAM,CAAN,CAAX,IAAuB,CAAC,KAAK,KAAL,CAAW,MAAM,CAAN,CAAX,KAAwB,CAAzB,IAA8B,CAArD;AACD;AACD,WAAK,IAAI,KAAI,CAAb,EAAgB,KAAI,QAAQ,MAA5B,EAAoC,IAApC,EAAyC;AACvC,aAAK,KAAL,CAAW,QAAQ,EAAR,CAAX;AACD;;AAED,WAAK,YAAL,CAAkB,IAAlB;AACD;;AAED;;;;;;;mCAImC;AAAA,UAAtB,IAAsB,yDAAf,KAAK,QAAU;;AACjC,UAAI,cAAc,OAAO,IAAP,CAAY,KAAK,QAAjB,EAA2B,MAA7C;AACA,UAAI,gBAAgB,CAApB,EAAuB;AACrB,aAAK,MAAL,GAAc,IAAd;AACD,OAFD,MAEO;AACL,aAAK,MAAL,GAAc,EAAd;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,cAAI,QAAQ,KAAK,KAAL,CAAW,KAAK,CAAL,CAAX,CAAZ;AACA,cAAI,UAAU,WAAd,EAA2B;AACzB,iBAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,CAAL,CAAjB;AACD;AACF;AACF;AACF;;;0BAEK,Q,EAAU;AACd,UAAI,OAAO,KAAK,QAAL,CAAc,QAAd,CAAP,KAAoC,WAAxC,EAAqD;AACnD;AACD;;AAED,UAAI,OAAO,KAAK,QAAL,CAAc,QAAd,KAA2B,EAAtC;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,aAAK,KAAL,CAAW,KAAK,CAAL,CAAX;AACD;AACD,aAAO,KAAK,QAAL,CAAc,QAAd,CAAP;;AAEA,WAAK,YAAL;AACD;;;wBAtDW;AACV,aAAO,KAAK,MAAZ;AACD;;;wBAsDc;AACb,UAAI,UAAU,OAAO,IAAP,CAAY,KAAK,KAAjB,CAAd;AACA,cAAQ,IAAR,CAAa,iBAAb;AACA,aAAO,OAAP;AACD;;;;;;kBA1EkB,S","file":"filterset.js","sourcesContent":["import { diffSortedLists } from \"./util\";\n\nfunction naturalComparator(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  }\n}\n\nexport default class FilterSet {\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    // Key: handle ID, Value: array of selected keys, or null\n    this._handles = {};\n    // Key: key string, Value: count of handles that include it\n    this._keys = {};\n    this._value = null;\n    this._activeHandles = 0;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  update(handleId, keys) {\n    if (keys !== null) {\n      keys = keys.slice(0); // clone before sorting\n      keys.sort(naturalComparator);\n    }\n\n    let {added, removed} = diffSortedLists(this._handles[handleId], keys);\n    this._handles[handleId] = keys;\n\n    for (let i = 0; i < added.length; i++) {\n      this._keys[added[i]] = (this._keys[added[i]] || 0) + 1;\n    }\n    for (let i = 0; i < removed.length; i++) {\n      this._keys[removed[i]]--;\n    }\n\n    this._updateValue(keys);\n  }\n\n  /**\n   * @param {string[]} keys Sorted array of strings that indicate\n   * a superset of possible keys.\n   */\n  _updateValue(keys = this._allKeys) {\n    let handleCount = Object.keys(this._handles).length;\n    if (handleCount === 0) {\n      this._value = null;\n    } else {\n      this._value = [];\n      for (let i = 0; i < keys.length; i++) {\n        let count = this._keys[keys[i]];\n        if (count === handleCount) {\n          this._value.push(keys[i]);\n        }\n      }\n    }\n  }\n\n  clear(handleId) {\n    if (typeof(this._handles[handleId]) === \"undefined\") {\n      return;\n    }\n\n    let keys = this._handles[handleId] || [];\n    for (let i = 0; i < keys.length; i++) {\n      this._keys[keys[i]]--;\n    }\n    delete this._handles[handleId];\n\n    this._updateValue();\n  }\n\n  get _allKeys() {\n    let allKeys = Object.keys(this._keys);\n    allKeys.sort(naturalComparator);\n    return allKeys;\n  }\n}\n"]}