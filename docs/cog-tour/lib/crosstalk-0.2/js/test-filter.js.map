{"version":3,"sources":["../../../javascript/tests/test-filter.js"],"names":[],"mappings":";;AAAA;;;;AACA;;IAAY,M;;AACZ;;;;;;;;AAEA,SAAS,YAAT,EAAuB,YAAM;AAC3B,MAAI,UAAU,OAAO,YAAP,CAAoB,qBAAM,QAAN,CAApB,CAAd;;AAEA,KAAG,gCAAH,EAAqC,YAAM;AACzC,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,IAAvC;;AAEA,YAAQ,GAAR,CAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAZ;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvC;AACD,GALD;;AAOA,MAAI,UAAU,OAAO,YAAP,CAAoB,qBAAM,QAAN,CAApB,CAAd;AACA,KAAG,8CAAH,EAAmD,YAAM;AACvD,0BAAO,QAAQ,UAAR,KAAuB,QAAQ,UAAtC;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,QAAQ,YAA/C;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvC;AACD,GAJD;;AAMA,KAAG,iDAAH,EAAsD,YAAM;AAC1D,QAAI,mBAAmB,OAAO,YAAP,CAAoB,qBAAM,QAAN,CAApB,CAAvB;AACA,qBAAiB,GAAjB,CAAqB,EAArB;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,QAAQ,YAA/C;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvC;AACA,qBAAiB,KAAjB;AACD,GAND;;AAQA,KAAG,+CAAH,EAAoD,YAAM;AACxD,YAAQ,GAAR,CAAY,CAAC,GAAD,EAAM,GAAN,CAAZ;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,QAAQ,YAA/C;AACA,qBAAO,SAAP,CAAiB,QAAQ,YAAzB,EAAuC,CAAC,GAAD,CAAvC;AACD,GAJD;;AAMA,KAAG,0BAAH,EAA+B,UAAC,IAAD,EAAU;AACvC,QAAI,gBAAgB,CAApB;;AAEA,YAAQ,EAAR,CAAW,QAAX,EAAqB,UAAC,CAAD,EAAO;AAC1B,uBAAO,SAAP,CAAiB,EAAE,QAAnB,EAA6B,CAAC,GAAD,CAA7B;AACA,uBAAO,SAAP,CAAiB,EAAE,KAAnB,EAA0B,CAAC,GAAD,EAAM,GAAN,CAA1B;AACA,UAAI,EAAE,aAAF,KAAoB,CAAxB,EAA2B;AACzB;AACD;AACF,KAND;AAOA,YAAQ,EAAR,CAAW,QAAX,EAAqB,UAAC,CAAD,EAAO;AAC1B,uBAAO,SAAP,CAAiB,EAAE,QAAnB,EAA6B,CAAC,GAAD,CAA7B;AACA,uBAAO,SAAP,CAAiB,EAAE,KAAnB,EAA0B,CAAC,GAAD,EAAM,GAAN,CAA1B;AACA,UAAI,EAAE,aAAF,KAAoB,CAAxB,EAA2B;AACzB;AACD;AACF,KAND;;AAQA,YAAQ,GAAR,CAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAZ;AACD,GAnBD;AAoBD,CAnDD","file":"test-filter.js","sourcesContent":["import assert from \"assert\";\nimport * as filter from \"./filter\";\nimport group from \"./group\";\n\ndescribe(\"Filter API\", () => {\n  let handle1 = filter.createHandle(group(\"groupA\"));\n\n  it(\"handles basic read/write cases\", () => {\n    assert.deepEqual(handle1.filteredKeys, null);\n\n    handle1.set([\"a\", \"b\", \"c\"]);\n    assert.deepEqual(handle1.filteredKeys, [\"a\", \"b\", \"c\"]);\n  });\n\n  let handle2 = filter.createHandle(group(\"groupA\"));\n  it(\"works with a second handle in the same group\", () => {\n    assert(handle1._filterSet === handle2._filterSet);\n    assert.deepEqual(handle1.filteredKeys, handle2.filteredKeys);\n    assert.deepEqual(handle2.filteredKeys, [\"a\", \"b\", \"c\"]);\n  });\n\n  it(\"isn't impacted by a handle in a different group\", () => {\n    let otherGroupHandle = filter.createHandle(group(\"groupB\"));\n    otherGroupHandle.set([]);\n    assert.deepEqual(handle1.filteredKeys, handle2.filteredKeys);\n    assert.deepEqual(handle2.filteredKeys, [\"a\", \"b\", \"c\"]);\n    otherGroupHandle.clear();\n  });\n\n  it(\"uses the intersection of handle filter values\", () => {\n    handle2.set([\"b\", \"d\"]);\n    assert.deepEqual(handle1.filteredKeys, handle2.filteredKeys);\n    assert.deepEqual(handle2.filteredKeys, [\"b\"]);\n  });\n\n  it(\"invokes change callbacks\", (done) => {\n    let callbackCount = 0;\n\n    handle1.on(\"change\", (e) => {\n      assert.deepEqual(e.oldValue, [\"b\"]);\n      assert.deepEqual(e.value, [\"b\", \"d\"]);\n      if (++callbackCount === 2) {\n        done();\n      }\n    });\n    handle2.on(\"change\", (e) => {\n      assert.deepEqual(e.oldValue, [\"b\"]);\n      assert.deepEqual(e.value, [\"b\", \"d\"]);\n      if (++callbackCount === 2) {\n        done();\n      }\n    });\n\n    handle1.set([\"a\", \"b\", \"c\", \"d\"]);\n  });\n});\n"]}